const API_BASE_URL = "https://pokeapi.co/api/v2";

/**
 * G√©n√®re un nombre entier al√©atoire entre min et max inclus.
 */
function getRandomNumber(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * R√©cup√®re une g√©n√©ration Pok√©mon al√©atoire et son nom en fran√ßais.
 * @returns {Promise<{ id: number, name: string }>}
 */
export async function getRandomGeneration() {
  const generationId = getRandomNumber(1, 9);
  console.log(`üé≤ G√©n√©ration al√©atoire choisie: ${generationId}`);

  // V√©rifie si la g√©n√©ration est d√©j√† en cache
  const cachedData = localStorage.getItem(`generation-${generationId}`);
  if (cachedData) {
    console.log("üìå Chargement depuis le cache local !");
    return JSON.parse(cachedData);
  }

  try {
    const response = await fetch(`${API_BASE_URL}/generation/${generationId}`);
    if (!response.ok) throw new Error(`Erreur API: ${response.statusText}`);

    const data = await response.json();
    console.log("‚úÖ R√©ponse compl√®te de l'API :", data);
    const frenchName = data.names.find(name => name.language.name === "fr")?.name || `G√©n√©ration ${generationId}`;

    const generationData = {
      id: generationId,
      name: frenchName,
      pokemon_species: data.pokemon_species
    };

    // Stocke les donn√©es en cache
    localStorage.setItem(`generation-${generationId}`, JSON.stringify(generationData));

    console.log(`üìä G√©n√©ration r√©cup√©r√©e: ${frenchName} (${generationId}) - R√©gion: ${regionName}`);
    return generationData;
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration de la g√©n√©ration :", error);
    return null;
  }
}


/**
 * R√©cup√®re un type Pok√©mon al√©atoire parmi les 18 premiers types.
 * @returns {Promise<string>} - Nom du type en anglais.
 */
export async function getRandomType() {
  // V√©rifie si les types sont d√©j√† en cache
  const cachedTypes = localStorage.getItem("pokemon-types");
  let types;

  if (cachedTypes) {
    console.log("üìå Chargement des types depuis le cache !");
    types = JSON.parse(cachedTypes);
  } else {
    try {
      const response = await fetch(`${API_BASE_URL}/type/`);
      if (!response.ok) throw new Error(`Erreur API: ${response.statusText}`);

      const data = await response.json();
      types = data.results.slice(0, 18);

      // Stocke les types en cache
      localStorage.setItem("pokemon-types", JSON.stringify(types));
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des types :", error);
      return null;
    }
  }

  const randomType = types[getRandomNumber(0, types.length - 1)];
  console.log(`üéØ Type al√©atoire choisi: ${randomType.name}`);
  return randomType.name;
}


/**
 * R√©cup√®re les Pok√©mon d'une g√©n√©ration et filtre ceux qui correspondent au type donn√©.
 * @param {number} generationId - ID de la g√©n√©ration
 * @param {string} type - Type de Pok√©mon (ex: "grass", "fire")
 * @returns {Promise<Array>} - Liste des Pok√©mon filtr√©s avec leur nom fran√ßais et sprite.
 */
export async function getFilteredPokemon(generationId, type) {
  console.log(`üîç Recherche des Pok√©mon de type "${type}" dans la g√©n√©ration ${generationId}`);

  // V√©rifie si cette combinaison est d√©j√† en cache
  const cacheKey = `pokemon-${generationId}-${type}`;
  const cachedPokemon = localStorage.getItem(cacheKey);
  if (cachedPokemon) {
    console.log("üìå Chargement des Pok√©mon depuis le cache !");
    return JSON.parse(cachedPokemon);
  }

  try {
    const response = await fetch(`${API_BASE_URL}/generation/${generationId}`);
    if (!response.ok) throw new Error("Erreur lors de la r√©cup√©ration de la g√©n√©ration");
    const generation = await response.json();

    console.log(`üìú ${generation.pokemon_species.length} Pok√©mon dans la g√©n√©ration ${generationId}`);

    const pokemonList = [];

    for (const species of generation.pokemon_species) {
      console.log(`‚û° V√©rification du Pok√©mon: ${species.name}`);

      const speciesResponse = await fetch(species.url);
      if (!speciesResponse.ok) continue;
      const speciesDetails = await speciesResponse.json();

      const pokemonVariety = speciesDetails.varieties.find(v => v.is_default);
      if (!pokemonVariety) continue;

      const pokemonResponse = await fetch(pokemonVariety.pokemon.url);
      if (!pokemonResponse.ok) continue;
      const pokemonDetails = await pokemonResponse.json();

      const hasType = pokemonDetails.types.some(t => t.type.name === type);
      if (!hasType) continue;

      const frenchName = speciesDetails.names.find(n => n.language.name === "fr")?.name || species.name;
      const sprite = pokemonDetails.sprites.other["official-artwork"].front_default;

      console.log(`‚úÖ ${species.name} valid√©: ${frenchName} (${type})`);
      pokemonList.push({ name: frenchName, sprite });
    }

    // Stocke le r√©sultat en cache
    localStorage.setItem(cacheKey, JSON.stringify(pokemonList));

    console.log(`‚úÖ ${pokemonList.length} Pok√©mon stock√©s en cache pour la g√©n√©ration ${generationId} et le type ${type}`);
    return pokemonList;
  } catch (error) {
    console.error("‚ùå Erreur lors du filtrage des Pok√©mon :", error);
    return [];
  }
}
